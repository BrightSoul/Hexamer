{
  "Type": "CodeCompletion",
  "ScoreAwarded": 1.0,
  "CorrectAnswer": "A3,B2,C1",
  "Text": {
	"It": "Stai gestendo un sito e-commerce che comprende un catalogo di 3.000 prodotti. Ogni giorno devono essere rimossi dal catalogo quei prodotti la cui `DataValidità` è ormai trascorsa. Per fare ciò, hai impostato un'operazione pianificata che alla mezzanotte invoca automaticamente il tuo metodo `RimuoviProdottiNonPiùValidi`.",
	"En": "You're working on an e-commerce site which has a catalog of 3000 products. Each day, you must remove the products having an expired `DateOfValidity`. In order to do so, you've set a scheduled task that's running each day at midnight that will invoke your method `RemoveInvalidProducts`."
  },
  "AnswerText": {
	"It": "Usare `List<Prodotto>` è necessario perché dobbiamo rimuovere elementi dalla collezione e questa classe ci dà appunto un metodo `RemoveAt` per farlo.  
Un `Prodotto` non avrebbe funzionato perché il metodo `RimuoviProdottiNonPiùValidi` esegue un ciclo sull'elenco che gli viene passato, e un singolo oggetto `Prodotto` non è ciclabile.  
Il tipo `IEnumerable<Prodotto>`, invece, è inadatto perché non consente di modificare l'elenco ma permette solo di scorrerlo in avanti.  
Per esaminare ogni elemento della lista, in questo caso usiamo un `ciclo for` dato che è l'unico che può funzionare con i parametri che si trovano tra le parentesi.  
Un ciclo `ciclo foreach` avrebbe richiesto una variabile di tipo Prodotto e la parola chiave `in`, mentre il `ciclo while` sarebbe stato inadatto in questo caso.  
Quando si dice che una data è \"trascorsa\", vuol dire che è nel passato e quindi usiamo l'operatore `<=` per verificare che sia inferiore a `DateTime.Now`, che restituisce la data/ora corrente.  

**Materiale di studio**

[Lezione 4, slide 51](https://files.slack.com/files-pri/T4LSU7RKJ-F4XRA1B4M/04-lezione-esame-unittest-eventi-lambdaexpressions.pdf#page=51)  
[Lezione 4, slide 54](https://files.slack.com/files-pri/T4LSU7RKJ-F4XRA1B4M/04-lezione-esame-unittest-eventi-lambdaexpressions.pdf#page=54)",
	"En": "A `List<Prodotto>` is necessary since we have to remove elements from a collection and this class has a method `RemoveAt` to do just that.  
A `Prodotto` wouldn't have worked since the method `RemoveInvalidProducts` does a for-loop on the object it receives as a parameter and a single `Prodotto` object wouldn't be iterable.  
The type `IEnumerable<Prodotto>` is not correct: even if it's an iterable type, it doesn't allow for modification (removal) of the elements.  
In order to iterate through each element in the collection, in this case we must use a `for loop` since it works with and index `i` that we use to access the elements randomly (square parenthesis).  
A `foreach loop` wouldn't have worked since it doesn't allow element removal while you're iterating through the collection.  
When a date is said to be `expired` it means it is in the past and we use the `<=` operator to check if it's less than `DateTime.Now`, which returns the current date and time.",
  },
  "Group": "04",
  "CodeText": { 
	"It": "public void RimuoviProdottiNonPiùValidi({A} prodotti) {
    {B} (int i = prodotti.Count-1; i &gt;= 0; i--) {
        if (prodotti[i].DataValidità {C} DateTime.Now) {
            prodotti.RemoveAt(i);
        }
    }
}",
	"En": "public void RemoveInvalidProducts({A} products) {
    {B} (int i = products.Count-1; i &gt;= 0; i--) {
        if (products[i].DateOfValidity {C} DateTime.Now) {
            products.RemoveAt(i);
        }
    }
}"
  },
  "Blocks": [
	{ "Id": "A", "Options": [ { "Id": "1", "Text": "IEnumerable&lt;Prodotto&gt;" }, { "Id": "2", "Text": "Prodotto" }, { "Id": "3", "Text": "List&lt;Prodotto&gt;" } ] },
	{ "Id": "B", "Options": [ { "Id": "1", "Text": "foreach" }, { "Id": "2", "Text": "for" }, { "Id": "3", "Text": "while" } ] },
	{ "Id": "C", "Options": [ { "Id": "1", "Text": "&lt;=" }, { "Id": "2", "Text": "==" }, { "Id": "3", "Text": "&gt;=" } ] }
  ]
}