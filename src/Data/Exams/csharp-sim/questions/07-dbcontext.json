{
  "Type": "CodeCompletion",
  "ScoreAwarded": 1.0,
  "CorrectAnswer": "A1,B3,C1",
  "Text": {
	"It": "Stai creando un'applicazione per leggere e scrivere i dati dei film in un database Sqlite e per far questo hai deciso di avvalerti di _Entity Framework Core_. Ora stai scrivendo la classe che deriva da `DbContext` per creare la mappatura tra la classe `Film` e la relativa tabella. La classe `Film` contiene le seguenti proprietà:
```
public class Film {
    public int Id { get; private set; }
    public string Titolo { get; private set; }
    public DateTime DataPubblicazione { get; private set; }
}
```",
	"En": "You're creating an application for reading and writing informations about films in a Sqlite database. To do so, you chose _Entity Framework Core_ as the persistence technology. Now you're writing the class that derives from `DbContext` and you proceed to create a mapping for the class `Film` to its database table. The class `Film` contains the following properties:  
```
public class Film {
    public int Id { get; private set; }
    public string Title { get; private set; }
    public DateTime PublishDate { get; private set; }
}
```"
  },
  "AnswerText": {
	"It": "Per usare _Entity Framework Core_ dobbiamo creare una classe che deriva da `DbContext` e che rappresenterà il nostro servizio per l'accesso al database, sia in lettura che in scrittura. Questa classe astrae dal database relazionale sottostante e ci permette di lavorare con un modello ad oggetti, anziché con le righe di una tabella. In questo modo possiamo sfruttare tutti i concetti della programmazione orientata agli oggetti.  
All'interno della nostra classe, facciamo l'override di due metodi:  
`OnConfiguring`, per indicare a quale database vogliamo collegarci (e qual è la sua connection string). Ad esempio, con `UseSqlite` indichiamo che dovrà essere usato il provider di Sqlite per l'accesso al db;
`OnModelCreating`, per creare il \"mapping\" tra le classi del nostro modello e le rispettive tabelle del database.  

Nel mapping ci sono utili due metodi (ma non sono i soli): con `ToTable` indichiamo il nome della tabella sulla quale verranno salvati i dati, mentre con `HasKey` andremo ad indicare con una _lambda expression_ qual è la proprietà designata come chiave primaria.  
Se vogliamo usare una delle nostre classi con Entity Framework è necessario che disponga di una proprietà da usare come **chiave primaria** (es. Id) e che disponga di un **costruttore senza parametri**, anche se `private`.  

**Materiale di studio**

[Lezione 7, slide 41](https://files.slack.com/files-pri/T4LSU7RKJ-F56QEGDR7/07-lezione-async-await-entityframework.pdf#page=41)",
	"En": "In order to use _Entity Framework Core_ we must first create a class deriving from `DbContext` representing our data access service, both for reading and for writing. This class is an abstraction of the database and allows us to query a model made of objects, instead of the typical rows in a database. As a consequence, we can benefit from all of the pillars of object-oriented programming, such as inheritance.  
Inside the class derived from `DbContext` we override two methods:  
`OnConfiguring`, to configure the connection to a database. For instance, by using the method `UseSqlite` and providing a connection string we instruct Entity Framework it will have to connect to a Sqlite database;  
`OnModelCreating`, to configure the \"mapping\" between classes in our model and tables of the database.  

To configure a mapping, there are several useful methods. Two of them are `ToTable`, which we use to specify the name of the table that will hold the data and `HasKey` which is used to specify the property acting as the primary key.  
If we want to use _Entity Framework Core_ then it's necessary that each class possess a **primary key** (e.g. Id) and a parameterless constructor (it can be `private`).",
  },
  "Group": "07",
  "CodeText": { 
	"It": "public Database : DbContext {
    protected override void OnConfiguring(DbContextOptionsBuilder db){
        db.{A}(@\"Data Source=..\\..\\..\\mydb.db;\");
    }  
    protected override void {B}(ModelBuilder mb){
        mb.Entity&lt;Film&gt;().ToTable(\"Film\").HasKey({C});
    }
}",
	"En": "public Database : DbContext {
    protected override void OnConfiguring(DbContextOptionsBuilder db){
        db.{A}(@\"Data Source=..\\..\\..\\mydb.db;\");
    }  
    protected override void {B}(ModelBuilder mb){
        mb.Entity&lt;Film&gt;().ToTable(\"Film\").HasKey({C});
    }
}"
  },
  "Blocks": [
	{ "Id": "A", "Options": [ { "Id": "1", "Text": "UseSqlite" }, { "Id": "2", "Text": "UseSqlServer" }, { "Id": "3", "Text": "WithDatabase" } ] },
	{ "Id": "B", "Options": [ { "Id": "1", "Text": "Map" }, { "Id": "2", "Text": "Start" }, { "Id": "3", "Text": "OnModelCreating" } ] },
	{ "Id": "C", "Options": [ { "Id": "1", "Text": "film =&gt; film.Id" }, { "Id": "2", "Text": "&quot;Id&quot;" }, { "Id": "3", "Text": "film.Id" } ] }
  ]
}