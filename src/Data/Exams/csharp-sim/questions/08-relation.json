{
  "Type": "CodeCompletion",
  "ScoreAwarded": 1.0,
  "CorrectAnswer": "A1,B2,C2",
  "Text": {
	"It": "La Regione ti ha affidato lo sviluppo di un'applicazione per gestire l'anagrafe canina. L'applicazione serve a registrare su database i nomi dei cani e dei loro padroni. Hai scelto di usare _Entity Framework Core_ per questo scopo.  
Finora hai scritto le classi `Padrone` e `Cane` e tra loro hai determinato che esiste una relazione 1-a-molti. Infatti, secondo la specifica che ti è stata fornita dall'anagrafe, un padone può registrare molti cani, ma un cane DEVE essere registrato con uno e un solo padrone.  
Come mappi la relazione tra `Cane` e `Padrone` nel metodo `OnModelCreating`?
",
	"En": ""
  },
  "AnswerText": {
	"It": "Una relazione 1-a-molti può essere mappata sia partendo dall'entità principale `Padrone` ma anche dall'entità dipendente `Cane`. In questa domanda, la relazione viene mappata partendo dall'entità dipendente `Cane`.  
Sappiamo che un `Cane` deve avere un solo padrone, quindi sceglieremo il metodo `HasOne` ed indicheremo la proprietà di navigazione chiamata `Padrone`.  
Ora il mapping continua dal punto di vista del `Padrone`, che può avere molti cani, e perciò useremo il metodo `WithMany`.  
Per concludere, dobbiamo indicare l'obbligatorietà della presenza di un `Padrone`. Questo si realizza usando il metodo `IsRequired`.  
_Entity Framework Core_ farà in modo che il vincolo di foreign key venga posto su una colonna della tabella `Cani` e non ammetterà valori null.  
Il codice delle classi `Cane` e `Padrone` non è stato mostrato, ma non è rilevante ai fini della soluzione.  

**Materiale di studio**

[Lezione 8, slide 32](https://files.slack.com/files-pri/T4LSU7RKJ-F5AE3AWGZ/08-lezione-entityframework-relazioni.pdf#page=32)",
	"En": "",
  },
  "Group": "08",
  "CodeText": { 
	"It": "protected override void OnModelCreating(ModelBuilder mb){
    mb.Entity&lt;Padrone&gt;().ToTable(\"Padroni\").HasKey(padrone => padrone.Id);
    mb.Entity&lt;Cane&gt;().ToTable(\"Cani\").HasKey(cane => cane.Id);
    mb.Entity&lt;Cane&gt;()
        .{A}(cane =&gt; cane.Padrone)
        .{B}(padrone =&gt; padrone.Cani)
        .{C}();
}",
	"En": ""
  },
  "Blocks": [
	{ "Id": "A", "Options": [ { "Id": "1", "Text": "HasOne" }, { "Id": "2", "Text": "HasMany" } ] },
	{ "Id": "B", "Options": [ { "Id": "1", "Text": "WithOne" }, { "Id": "2", "Text": "WithMany" } ] },
	{ "Id": "C", "Options": [ { "Id": "1", "Text": "IsOptional" }, { "Id": "2", "Text": "IsRequired" } ] }
  ]
}