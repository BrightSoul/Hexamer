{
  "Type": "CodeCompletion",
  "ScoreAwarded": 1.0,
  "CorrectAnswer": "A3,B1,C2",
  "Text": {
	"It": "Stai realizzando un'applicazione web per il CUP Regionale, per la prenotazione di visite mediche specialistiche. I pazienti possono visitare una pagina web e compilare un form per prenotarsi autonomamente.  
Finora hai scritto l'action `Prenota` che riceve i dati inviati dal form. La prenotazione viene accettata solo se il paziente ha digitato correttamente tutte le informazioni. Se è così, viene reindirizzato all'action `Index`, dove potrà visualizzare il riepilogo di tutte le sue prenotazioni. Invece, se i dati inviati non fossero corretti, vedrà riapparire la stessa View da cui dovrà correggere i dati prima di inviarli di nuovo. Come realizzi l'action `Prenota`?",
	"En": ""
  },
  "AnswerText": {
	"It": "Ogni volta che riceviamo dei dati dagli utenti, ricordiamoci di verificare che siano validi con `ModelState.IsValid`. ASP.NET MVC si assicurerà che tutti gli attributi come `[Required]` che abbiamo posto sulle proprietà della nostra classe `Prenotazione` siano rispettati.  
Questa si chiama **validazione lato server** e ci assicura che nel nostro sistema entrino solo dati validi.  

Se la prenotazione è valida, la aggiungiamo al servizio prenotazioni e poi reindirizziamo l'utente verso la pagina Index usando il metodo `RedirectToAction`.  
Il metodo `File`, invece, serve a fornire un file all'utente, come per esempio una ricevuta della sua prenotazione ma in questo caso non era richiesto.  
Il metodo `Ok` serve a restituire al client un oggetto serializzato in JSON o in XML, ed è più indicato per applicazioni Web API dato che il risultato non sarebbe facilmente leggibile da utenti inesperti (e sarebbe comunque un risultato testuale privo di grafica).  

Invece, se i dati della prenotazione non fossero validi, mostriamo di nuovo la pagina di inserimento dati all'utente usando il metodo `View` affinché possa correggere i dati.  

**Materiale di studio**

[Lezione 9, slide 8](https://files.slack.com/files-pri/T4LSU7RKJ-F5EAZRPB7/09-lezione-asp-net-core.pdf#page=8)",
	"En": "",
  },
  "Group": "09",
  "CodeText": { 
	"It": "[HttpPost]
public async Task&lt;IActionResult&gt; Prenota(Prenotazione prenotazione) {
    if ({A}) {
        await servizioPrenotazioni.Aggiungi(prenotazione);
        return {B}(\"Index\");
    } else {
        return {C}(prenotazione);
    }
}",
	"En": ""
  },
  "Blocks": [
	{ "Id": "A", "Options": [ { "Id": "1", "Text": "Correct" }, { "Id": "2", "Text": "!ModelState.IsValid" }, { "Id": "3", "Text": "ModelState.IsValid" } ] },
	{ "Id": "B", "Options": [ { "Id": "1", "Text": "RedirectToAction" }, { "Id": "2", "Text": "File" }, { "Id": "3", "Text": "Ok" } ] },
	{ "Id": "C", "Options": [ { "Id": "1", "Text": "Ok" }, { "Id": "2", "Text": "View" } ] }
  ]
}