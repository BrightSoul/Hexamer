{
  "Type": "MultipleChoice",
  "ScoreAwarded": 1.0,
  "CorrectAnswer": "B",
  "Text": {
	"It": "Hai creato un'applicazione web ASP.NET Core MVC per la registrazione degli studenti agli esami. L'applicazione informa gli studenti via e-mail ogni volta che si verifica una variazione alla data di un esame o per confermare l'avvenuta iscrizione. Dato che l'invio e-mail è un servizio molto utilizzato in questa applicazione, hai deciso di inserire la sua logica in una classe chiamata `InvioEmail` e di registrarla come servizio nel metodo `Startup.ConfigureServices`.  
Vuoi che ASP.NET Core fornisca sempre la stessa istanza ad ogni Controller che abbia bisogno di inviare e-mail, dato che la classe `InvioEmail` è thread-safe e può essere riutilizzata per tutto il ciclo di vita dell'applicazione. Come registri la classe?",
	"En": ""
  },
  "AnswerText": {
	"It": "Il ciclo di vita `Singleton` è quello indicato, in questo. Alcune classi come la nostra `InvioEmail` sono indicate ad essere riutilizzate più volte, ma è necessario che siano `thread-safe`, ovvero devono poter sopportare le invocazioni contemporanee di più thread.  
Un `DbContext` di _Entity Framework Core_, per esempio, NON sarebbe idoneo ad essere registrato come `Singleton`, perché NON è `thread-safe` e perciò dovrebbe essere regitrato come `Scoped`, ovvero creato e distrutto nel contesto di una richiesta HTTP, che viene gestita solo da un thread alla volta.  
Il ciclo di vita `Transient`, invece, determinerebbe la creazione di una nuova istanza ogni volta che un `Controller` (o qualsiasi altro componente del nostro software) ne abbia bisogno per funzionare.  

**Materiale di studio**

[Lezione 10, slide 21](https://files.slack.com/files-pri/T4LSU7RKJ-F5HP1EQLA/10-lezione-refactoring-model-binding.pdf#page=21)",
	"En": "",
  },
  "Group": "10",
  "Options": [
	{ "Id": "A", "Text": { "It": "services.AddScoped(typeof(InvioEmail));", "En": "" } },
	{ "Id": "B", "Text": { "It": "services.AddSingleton(typeof(InvioEmail));", "En": "" } },
	{ "Id": "C", "Text": { "It": "services.AddTransient(typeof(InvioEmail));", "En": "" } },
	{ "Id": "D", "Text": { "It": "services.Add(typeof(InvioEmail));", "En": "" } }
  ]
}