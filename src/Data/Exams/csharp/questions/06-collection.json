{
  "Type": "MultipleChoice",
  "ScoreAwarded": 1.0,
  "CorrectAnswer": "B",
  "Text": {
	"It": "Dopo aver realizzato l'applicazione degli scacchi, Bob ti ha richiamato per farti implementare una nuova funzionalità. Vuole che i giocatori possano annullare le proprie mosse per tornare ad uno stato precedente della sacchiera.  
La prima mossa che può essere annullata è l'ultima compiuta. La seconda che può essere annullata è la penultima, e così via, potenzialmente fino ad annullarle tutte secondo il criterio _first-in last-out_. Tra le collezioni offerte dal .NET Core, qual è la più indicata per supportare questa funzionalità?",
	"En": ""
  },
  "AnswerText": {
	"It": "La classe `Stack<T>` è indubbiamente la più indicata perché è specializzata nel gestire l'ingresso e l'uscita degli elementi secondo il criterio _first-in last-out_.  
La classe `List<T>` può essere usata anch'essa secondo quel criterio ma anche in tanti altri modi. Questa sua versatilità è certamente un pregio, ma anche un difetto in casi molto specifici come questo, in cui se siamo distratti rischiamo di usarla male ed introdurre bug.  
La classe `Queue<T>` non è adatta a questo caso perché la usiamo per gestire code, ovvero un ingresso e un'uscita degli elementi secondo il criterio _first-in first-out_.  
Per la classe `ObservableCollection<T>` vale lo stesso discorso di `List<T>`. Inoltre, non è richiesto che eventuali sottoscrittori siano notificati di cambiamenti alla collezione.  

**Materiale di studio**

[Lezione 6, slide 26](https://slack-files.com/files-pri/T4LSU7RKJ-F54TQ55TM/06-lezione-collezioni-ereditariet__.pdf#page=26)",
	"En": "",
  },
  "Group": "06",
  "Options": [
	{ "Id": "A", "Text": { "It": "List&lt;T&gt;", "En": "" } },
	{ "Id": "B", "Text": { "It": "Stack&lt;T&gt;", "En": "" } },
	{ "Id": "C", "Text": { "It": "Queue&lt;T&gt;", "En": "" } },
	{ "Id": "D", "Text": { "It": "ObservableCollection&lt;T&gt;", "En": "" } }
  ]
}